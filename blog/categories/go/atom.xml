<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: go | GIS行迹]]></title>
  <link href="http://hengcai.github.io/blog/categories/go/atom.xml" rel="self"/>
  <link href="http://hengcai.github.io/"/>
  <updated>2014-10-06T17:24:55+08:00</updated>
  <id>http://hengcai.github.io/</id>
  <author>
    <name><![CDATA[hengcai]]></name>
    <email><![CDATA[hengcai007@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GoConvey使用说明]]></title>
    <link href="http://hengcai.github.io/blog/2014/10/06/golang-goconvey/"/>
    <updated>2014-10-06T17:20:12+08:00</updated>
    <id>http://hengcai.github.io/blog/2014/10/06/golang-goconvey</id>
    <content type="html"><![CDATA[<h4>案例</h4>

<pre><code class="go">
import (
    . "github.com/smartystreets/goconvey/convey"
    "testing"
)

func TestAdd(t *testing.T) {
    Convey("两数相加", t, func() {
        So(Add(1, 2), ShouldEqual, 3)
    })
}
func TestSubtract(t *testing.T) {
    Convey("subtract ", t, func() {
        So(Subtract(1, 2), ShouldEqual, -1)
    })
}
func TestMultiply(t *testing.T) {
    Convey("Muyltipy", t, func() {
        So(Multipy(3, 2), ShouldEqual, 6)

    })
}
func TestDivision(t *testing.T) {
    Convey("Dicision", t, func() {
        Convey("被除数 0", func() {
            _, err := Division(10, 0)
            So(err, ShouldNotBeNil)
        })
        Convey("被除数不为0", func() {
            num, err := Division(10, 2)
            So(err, ShouldBeNil)
            So(num, ShouldEqual, 5)
        })
    })
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go语言Web程序开发]]></title>
    <link href="http://hengcai.github.io/blog/2014/09/30/golang-goweb/"/>
    <updated>2014-09-30T21:53:57+08:00</updated>
    <id>http://hengcai.github.io/blog/2014/09/30/golang-goweb</id>
    <content type="html"><![CDATA[<h3>web开发常用工具</h3>

<p>mvc 工具</p>

<blockquote><p>revel
beego</p></blockquote>

<p>demo</p>

<pre><code class="go">package main

import (
    "github.com/astaxie/beego"
)

type HomeController struct {
    beego.Controller
}

func (this *HomeController) Get() {
    this.Ctx.WriteString("Hello World Hengcai")

}
func main() {
    beego.Router("/", &amp;HomeController{})
    beego.Run()
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beego库学习]]></title>
    <link href="http://hengcai.github.io/blog/2014/09/30/golang-beego/"/>
    <updated>2014-09-30T20:11:15+08:00</updated>
    <id>http://hengcai.github.io/blog/2014/09/30/golang-beego</id>
    <content type="html"><![CDATA[<h3>入门实例</h3>

<h3>路由设置</h3>

<h5>1.基本路由</h5>

<h5>2.映射路由</h5>

<h5>3.自动化路由</h5>

<p>&lsquo;&rsquo;&lsquo;go
beego.AutoRouter()</p>

<p>&lsquo;&rsquo;&#8217;</p>

<h3>命名空间Namespace</h3>

<p>&lsquo;&rsquo;&lsquo;go</p>

<p>&lsquo;&rsquo;&#8217;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go语言环境配置]]></title>
    <link href="http://hengcai.github.io/blog/2014/09/26/golang-enviroment/"/>
    <updated>2014-09-26T09:27:00+08:00</updated>
    <id>http://hengcai.github.io/blog/2014/09/26/golang-enviroment</id>
    <content type="html"><![CDATA[<h4>Windows环境配置</h4>

<h3>Linux环境配置</h3>
]]></content>
  </entry>
  
</feed>
